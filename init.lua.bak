-- Bootstrap Packer for plugin management
local install_path = vim.fn.stdpath('data') .. '/site/pack/packer/start/packer.nvim'
if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  vim.fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
  vim.cmd [[packadd packer.nvim]]
end

-- Automatically compile Packer whenever this config file is saved
vim.cmd [[
  augroup packer_user_config
    autocmd!
    autocmd BufWritePost init.lua source <afile> | PackerSync
  augroup end
]]

-- Use Packer to manage plugins
require('packer').startup(function(use)
  use 'wbthomason/packer.nvim'  -- Packer can manage itself
  use 'folke/tokyonight.nvim'   -- Theme

  -- Icons (required for lualine, nvim-tree, alpha dashboard)
  use {
    'kyazdani42/nvim-web-devicons',
    config = function()
      require('nvim-web-devicons').setup { default = true }
    end
  }

  -- File explorer
  use {
    'kyazdani42/nvim-tree.lua',
    requires = 'kyazdani42/nvim-web-devicons',
    config = function()
      require('nvim-tree').setup {}
    end
  }

  -- Status line
  use {
    'nvim-lualine/lualine.nvim',
    requires = 'kyazdani42/nvim-web-devicons',
    config = function()
      require('lualine').setup {
        options = {
          icons_enabled = true,
          theme = 'tokyonight',
          component_separators = { left = '', right = '' },
          section_separators = { left = '', right = '' },
          disabled_filetypes = {}
        }
      }
    end
  }

  -- Dashboard with Emoji icons and random quote footer
  use {
    'goolord/alpha-nvim',
    requires = { 'kyazdani42/nvim-web-devicons' },
    config = function()
      local alpha = require('alpha')
      local dashboard = require('alpha.themes.dashboard')

      -- Header with cool ASCII art
      dashboard.section.header.val = {
        " ███╗   ██╗██╗   ██╗██╗███╗   ███╗ ",
        " ████╗  ██║██║   ██║██║████╗ ████║ ",
        " ██╔██╗ ██║██║   ██║██║██╔████╔██║ ",
        " ██║╚██╗██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
        " ██║ ╚████║ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
        " ╚═╝  ╚═══╝  ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
      }

      -- Menu with Emoji icons and Telescope integration
      dashboard.section.buttons.val = {
        dashboard.button("e", "📄  New file", ":ene <BAR> startinsert <CR>"),
        dashboard.button("f", "🔍  Find file", ":Telescope find_files<CR>"),
        dashboard.button("r", "🕘  Recent files", ":Telescope oldfiles<CR>"),
        dashboard.button("s", "👀  Settings", ":e $MYVIMRC<CR>"),
        dashboard.button("q", "❌  Quit Neovim", ":qa<CR>"),
      }

      -- Random quote function for footer
      local function random_quote()
        local quotes = {
          "Do one thing every day that scares you.",
          "Strive not to be a success, but rather to be of value.",
          "You miss 100% of the shots you don’t take.",
          "Success is walking from failure to failure with no loss of enthusiasm.",
          "Your time is limited, don’t waste it living someone else’s life."
        }
        math.randomseed(os.time())
        return quotes[math.random(#quotes)]
      end

      dashboard.section.footer.val = random_quote()

      -- Set up alpha with dashboard
      alpha.setup(dashboard.config)
    end
  }

  -- LSP configurations and installer
  use { 'neovim/nvim-lspconfig' }
  use {
    'williamboman/mason.nvim',
    config = function()
      require('mason').setup()
    end
  }
  use {
    'williamboman/mason-lspconfig.nvim',
    after = 'mason.nvim',
    config = function()
      require('mason-lspconfig').setup {
        ensure_installed = { "pyright", "lua_ls", "ts_ls" },
        automatic_installation = true,
      }
    end
  }

  -- Autocompletion
  use {
    'hrsh7th/nvim-cmp',
    requires = {
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
      'hrsh7th/cmp-cmdline'
    },
    config = function()
      local cmp = require('cmp')
      cmp.setup {
        mapping = {
          ['<C-d>'] = cmp.mapping.scroll_docs(-4),
          ['<C-f>'] = cmp.mapping.scroll_docs(4),
          ['<C-Space>'] = cmp.mapping.complete(),
          ['<CR>'] = cmp.mapping.confirm({ select = true })
        },
        sources = {
          { name = 'nvim_lsp' },
          { name = 'buffer' },
          { name = 'path' },
        }
      }
    end
  }

  -- Telescope for fuzzy finding
  use {
    'nvim-telescope/telescope.nvim',
    requires = { 'nvim-lua/plenary.nvim' },
    config = function()
      require('telescope').setup {}
    end
  }
end)

-- Set leader key to space
vim.g.mapleader = " "

-- UI & Aesthetics
vim.opt.termguicolors = true                -- Enable true color support
vim.cmd("colorscheme tokyonight")            -- Set colorscheme
vim.opt.cursorline = true                    -- Highlight cursor line

-- Set line numbers
vim.opt.number = true
vim.opt.relativenumber = true

-- Tabs and Indentation
vim.opt.expandtab = true                     -- Convert tabs to spaces
vim.opt.shiftwidth = 2                       -- Number of spaces for indentation
vim.opt.tabstop = 2                          -- Number of spaces per tab

-- Clipboard
vim.opt.clipboard = "unnamedplus"            -- Use system clipboard

-- Search
vim.opt.ignorecase = true                    -- Ignore case when searching
vim.opt.smartcase = true                     -- Override ignorecase if uppercase is used in search

-- Window Splits
vim.opt.splitbelow = true                    -- Horizontal splits go below
vim.opt.splitright = true                    -- Vertical splits go to the right

-- Backup and Swap Files
vim.opt.backupdir = vim.fn.stdpath("data") .. "/backup"
vim.opt.directory = vim.fn.stdpath("data") .. "/swap"
vim.opt.undofile = true                      -- Enable persistent undo

-- Wildmenu for command-line completion
vim.opt.wildmenu = true
vim.opt.wildignore = "*/.git/*,*/.hg/*,*/.svn/*,*.pyc"

-- Folding
vim.opt.foldmethod = "indent"                -- Fold based on indentation
vim.opt.foldnestmax = 3                      -- Max fold depth
vim.opt.foldenable = false                   -- Start with folds closed

-- Keymaps for Plugins
-- Toggle file explorer
vim.keymap.set('n', '<C-n>', ':NvimTreeToggle<CR>', { noremap = true, silent = true })

